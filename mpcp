#!/bin/bash

# Keymapping
NEXT=''
PREV='z'
TOGGLE_PAUSE='c'
QUIT='q'
FINISH_ALBUM='f'

# Options
PLAYLIST_SEP="~upcoming~"
PLAYLIST_LEN=10

ELAPSED_CHAR="="
FILL_CHAR="-"

# Globals
CUR_TRACK=''
CUR_LEN=''

# Set default MPC_FMT if unset
MPC_FMT=${MPC_FMT:='[[%artist% - ]%title%[ (on %album%)]]|[%file%]'}

# term_width : width
function term_width {
    stty size | cut -d" " -f2
}

# dupe_char : char -> count -> string
function dupe_char {
    out=""
    for ((i=0; i < $2; i++)); do
        out="$out$1"
    done
    echo $out
}


# tracknum : num
function tracknum {
    mpc | sed -E '2 { s/.*#([0-9]*).*/\1/; p; }; d;'
}

# next_songs : count -> [string]
function next_songs {
    offset=$((`tracknum` + 1))
    mpc -f "$MPC_FMT" playlist | tail -n "+$offset" | head -n $1
}

# song_percent : percent
function song_percent {
    mpc | sed -E '2 { s|.*\(([0-9]+)%\).*|\1|; p; }; d;'
}

function playlist_remaining {
    echo $((`mpc playlist | wc -l` - `tracknum`))
}

# upcoming_len : string
function upcoming_len {
    MPC_FMT="%time%" next_songs `playlist_remaining` | awk -F ':' '
    { total += ($1 * 60) + $2 }
    END {
        sec = total % 60; total /= 60;
        min = total % 60; total /= 60;
        hour = total % 60;
        printf "%d:%d:%d", hour, min, sec;
    }'
}

# status_bar : left_pad -> string
function status_bar {
    # term_width - padding - brackets
    bar_width=$(( `term_width` - $1 - 2))
    elapsed_full=$(echo "scale=3; `song_percent` * ($bar_width / 100)" | bc)
    elapsed_count=$(printf "%.0f" $elapsed_full)
    fill_count=$(( $bar_width - $elapsed_count - 1))

    elapsed_string="$(dupe_char $ELAPSED_CHAR $elapsed_count)"
    fill_string="$(dupe_char $FILL_CHAR $fill_count)"
    echo -n "[${elapsed_string}>${fill_string}]"
}

function echo_figlet {
    echo $2 | iconv -f "UTF-8" -t LATIN1//TRANSLIT | figlet -c -k -w $1
}

function big_title {
    title=`mpc -f "[%title% - %artist%]" | head -n1`
    album=`mpc -f "[(%album%)]" | head -n1`
    if [ -z "$title" ]; then
        title=`mpc -f "%file%" | head -n1 | sed -E 's$.*/(.*)$\1$'`
    fi
    width="$(term_width)"
    echo_figlet $width "$title"
    if [ -n "$album" ]; then
        echo_figlet $width "$album"
    fi
}


function printcurrent {
    clear
    big_title
    mpc -f "$MPC_FMT" | tail -n1
    # Get a list of upcomming songs
    _song_count=`next_songs $PLAYLIST_LEN | wc -l | sed -E 's/[ ]*//g'`
    # Print '~Playlist~' only if there are upcomming songs
    if [ $_song_count -ne 0 ]; then
        echo $PLAYLIST_SEP "(`upcoming_len`)"
    fi
    next_songs $PLAYLIST_LEN
}

# handle_char : input_char
function handle_char {
    CUR_TRACK='';
    case $1 in
            $NEXT) mpc -f "$MPC_FMT" next;;
            $PREV) mpc -f "$MPC_FMT" prev;;
    $TOGGLE_PAUSE) mpc -f "$MPC_FMT" toggle;;
    $FINISH_ALBUM) finish_album;;
            $QUIT) echo; exit 0;;
    esac
}

#prevent intial delay
clear
printcurrent

# re-draw when the terminal changes size
trap printcurrent SIGWINCH

while true; do
    # 1 second resolution
    read -n 1 -t 1 IN
    # If we read a character
    if [ $? -eq 0 ]; then handle_char $IN; fi

    track=`mpc -f "$MPC_FMT" | head -n1`
    if [ "$CUR_TRACK" != "$track" ]; then
        printcurrent
        CUR_LEN=`printcurrent | wc -l`
        CUR_TRACK=$track
    fi
    status_line=" `mpc -f "$MPC_FMT" | head -n2 | tail -n1`"
    left_pad=$(( ${#status_line} + 2 ))
    bar="$(status_bar $left_pad)"
    echo -en "\r${status_line} ${bar} \r"
done
