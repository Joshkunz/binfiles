#!/bin/bash

NEXT=''
PREV='t'
TOGGLE_PAUSE='p'
QUIT='q'
FINISH_ALBUM='f'

CUR_TRACK=''
CUR_LEN=''

PLAYLIST_SEP="~upcoming~"

PLAYLIST_LEN=10

# Set default MPC_FMT if unset
MPC_FMT=${MPC_FMT:='[[%artist% - ]%title%[ (on %album%)]]|[%file%]'}

function tracknum {
    mpc -f "$MPC_FMT" | sed -E '2 { s/.*#([0-9]*).*/\1/; p; }; d;'
}

function next_songs {
    offset=$((`tracknum` + 1))
    mpc -f "$MPC_FMT" playlist | tail -n "+$offset" | head -n $1
}

function printcurrent {
    mpc -f "$MPC_FMT" | head -n1
    mpc -f "$MPC_FMT" | tail -n1
    # Get a list of upcomming songs
    _song_count=`next_songs $PLAYLIST_LEN | wc -l | sed -E 's/[ ]*//g'`
    # Print '~Playlist~' only if there are upcomming songs
    if [ $_song_count -ne 0 ]; then
        echo $PLAYLIST_SEP
    fi
    next_songs $PLAYLIST_LEN
}

function handle_char {
    CUR_TRACK='';
    case $1 in
        $NEXT) mpc -f "$MPC_FMT" next;;
        $PREV) mpc -f "$MPC_FMT" prev;;
$TOGGLE_PAUSE) mpc -f "$MPC_FMT" toggle;;
$FINISH_ALBUM) finish_album;;
        $QUIT) echo; exit 0;;
    esac
}

#prevent intial delay
clear
printcurrent

# 1 second resolution
while true; do
    read -n 1 -t 1 IN
    if [ $? -eq 0 ]; then handle_char $IN; fi

    track=`mpc -f "$MPC_FMT" | head -n1`
    if [ "$CUR_TRACK" != "$track" ]; then
        clear
        printcurrent
        CUR_LEN=`printcurrent | wc -l`
        CUR_TRACK=$track
    fi
    echo -en "\r `mpc -f "$MPC_FMT" | head -n2 | tail -n1`\r"
done
